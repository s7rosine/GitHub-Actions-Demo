name: DevOps Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_push_images:
    name: Build and Push Docker Images to DockerHub
    runs-on: [self-hosted, s8]

    env:
      API_IMAGE: devopseasylearning/s9-api:latest
      DB_IMAGE: devopseasylearning/s9-db:latest
      FRONTEND_IMAGE: devopseasylearning/s9-frontend:latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Run Checkov Scan with Config File
        run: |
          ls -l
          echo "Running Checkov .checkov.yaml config"
          cat .checkov.yaml
          checkov -f s9/app01/api.Dockerfile --config-file .checkov.yaml
          checkov -f s9/app01/db.Dockerfile --config-file .checkov.yaml
          checkov -f s9/app01/frontend.Dockerfile --config-file .checkov.yaml

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.login=${SONAR_TOKEN}

      - name: Build Docker Images (API, DB, Frontend)
        working-directory: s9/app01
        run: |
          sudo docker build -f api.Dockerfile -t $API_IMAGE .
          sudo docker build -f db.Dockerfile -t $DB_IMAGE .
          sudo docker build -f frontend.Dockerfile -t $FRONTEND_IMAGE .
          sudo docker images

      - name: Scan Docker Images with Trivy
        run: |
          echo "Scanning API image..."
          trivy image --severity MEDIUM,HIGH,CRITICAL --no-progress $API_IMAGE

          # echo "Scanning DB image..."
          # trivy image --severity MEDIUM,HIGH,CRITICAL --no-progress $DB_IMAGE

          # echo "Scanning Frontend image..."
          # trivy image --severity MEDIUM,HIGH,CRITICAL --no-progress $FRONTEND_IMAGE

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Docker Images
        run: |
          docker push $API_IMAGE
          docker push $DB_IMAGE
          docker push $FRONTEND_IMAGE

  deploy:
    name: Deploy using Docker Compose
    runs-on: [self-hosted, s8]
    needs: build_and_push_images

    env:
      API_IMAGE: devopseasylearning/s9-api:latest
      DB_IMAGE: devopseasylearning/s9-db:latest
      FRONTEND_IMAGE: devopseasylearning/s9-frontend:latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Replace image placeholders in docker-compose.yml
        working-directory: s9/app01
        run: |
          sed -i "s|API_IMAGE|$API_IMAGE|g" docker-compose.yml
          sed -i "s|DB_IMAGE|$DB_IMAGE|g" docker-compose.yml
          sed -i "s|FRONTEND_IMAGE|$FRONTEND_IMAGE|g" docker-compose.yml
          sed -i "s|POSTGRES_USER_S9|${{ vars.POSTGRES_USER_S9 }}|g" docker-compose.yml
          sed -i "s|POSTGRES_PASSWORD_S9|${{ secrets.POSTGRES_PASSWORD_S9 }}|g" docker-compose.yml
          cat docker-compose.yml

          docker pull $API_IMAGE
          docker pull $DB_IMAGE
          docker pull $FRONTEND_IMAGE

      - name: Deploy with Docker Compose
        working-directory: s9/app01
        run: |
          docker compose down --volumes --remove-orphans
          docker-compose up -d
          docker-compose ps

  notification:
    name: Slack Notification
    runs-on: [self-hosted, s8]
    needs: [build_and_push_images, deploy]

    steps:
      - name: Send Slack Notification (Success/Failure)
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="Success"
          COLOR="#2eb886"
          ICON="✅"
          if [ "${{ needs.build_and_push_images.result }}" != "success" ] || [ "${{ needs.deploy.result }}" != "success" ]; then
            STATUS="Failed"
            COLOR="#e01e5a"
            ICON="❌"
          fi

          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")

          curl -X POST -H 'Content-type: application/json' --data "{
            \"attachments\": [
              {
                \"color\": \"$COLOR\",
                \"blocks\": [
                  {
                    \"type\": \"header\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"$ICON DevOps Pipeline $STATUS\",
                      \"emoji\": true
                    }
                  },
                  {
                    \"type\": \"section\",
                    \"fields\": [
                      { \"type\": \"mrkdwn\", \"text\": \"*Repository:*\n${GITHUB_REPOSITORY}\" },
                      { \"type\": \"mrkdwn\", \"text\": \"*Branch:*\nmain\" },
                      { \"type\": \"mrkdwn\", \"text\": \"*Status:*\n$STATUS\" },
                      { \"type\": \"mrkdwn\", \"text\": \"*Triggered By:*\n${GITHUB_ACTOR}\" },
                      { \"type\": \"mrkdwn\", \"text\": \"*Commit:*\n<https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}|${GITHUB_SHA:0:7}>\" },
                      { \"type\": \"mrkdwn\", \"text\": \"*Time:*\n$TIMESTAMP\" }
                    ]
                  },
                  {
                    \"type\": \"context\",
                    \"elements\": [
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"$ICON View details in <https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}|GitHub Actions>.\" 
                      }
                    ]
                  }
                ]
              }
            ]
          }" "$SLACK_WEBHOOK_URL"
